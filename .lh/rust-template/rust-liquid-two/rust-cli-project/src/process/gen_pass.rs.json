{
    "sourceFile": "rust-template/rust-liquid-two/rust-cli-project/src/process/gen_pass.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1719211059150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719211162318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,7 @@\n use rand::seq::SliceRandom;\n+\n+\n+const UPPER:&[u8] = b\"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n+const LOWER:&[u8] = b\"abcdefghijkmnopqrstuvwxyz\"\n+const NUMBER:&[u8] = b\"123456789\"\n+const SYMBOL:&[u8] =b\"!@#$%^&*_\";\n"
                },
                {
                    "date": 1719211180249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,5 +3,10 @@\n \n const UPPER:&[u8] = b\"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n const LOWER:&[u8] = b\"abcdefghijkmnopqrstuvwxyz\"\n const NUMBER:&[u8] = b\"123456789\"\n-const SYMBOL:&[u8] =b\"!@#$%^&*_\";\n+const SYMBOL:&[u8] = b\"!@#$%^&*_\";\n+\n+\n+pub fn process_genpass {\n+    \n+}\n"
                },
                {
                    "date": 1719211268319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,6 +7,10 @@\n const SYMBOL:&[u8] = b\"!@#$%^&*_\";\n \n \n pub fn process_genpass {\n-    \n+    length:u8,\n+    upper:bool,\n+    lower:bool,\n+    number:bool,\n+    symbol:bool,\n }\n"
                },
                {
                    "date": 1719211294871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,13 @@\n const NUMBER:&[u8] = b\"123456789\"\n const SYMBOL:&[u8] = b\"!@#$%^&*_\";\n \n \n-pub fn process_genpass {\n+pub fn process_genpass (\n     length:u8,\n     upper:bool,\n     lower:bool,\n     number:bool,\n     symbol:bool,\n+)-> anyhow::Result<String>{\n+    \n }\n"
                },
                {
                    "date": 1719211365511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,6 +13,7 @@\n     lower:bool,\n     number:bool,\n     symbol:bool,\n )-> anyhow::Result<String>{\n-    \n+\n+    let mut rng: rand::prelude::ThreadRng = rand::thread_rng();\n }\n"
                },
                {
                    "date": 1719211389319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,5 +15,7 @@\n     symbol:bool,\n )-> anyhow::Result<String>{\n \n     let mut rng: rand::prelude::ThreadRng = rand::thread_rng();\n+    let mut password:Vec<u8> = Vec::new();\n+    let mut chars:Vec<u8> = Vec::new();\n }\n"
                },
                {
                    "date": 1719211470988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,15 @@\n \n     let mut rng: rand::prelude::ThreadRng = rand::thread_rng();\n     let mut password:Vec<u8> = Vec::new();\n     let mut chars:Vec<u8> = Vec::new();\n+\n+\n+    if upper {\n+\n+        chars.extend_from_slice(UPPER);\n+        password.push(*UPPER.choose(&mut rng).expect(\"Upper won't be empty\"));\n+    }\n+\n+\n+    \n }\n"
                },
                {
                    "date": 1719211642612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,6 +26,22 @@\n         password.push(*UPPER.choose(&mut rng).expect(\"Upper won't be empty\"));\n     }\n \n \n-    \n+\n+    if lower {\n+        chars.extend_from_slice(LOWER);\n+        password.push(*LOWER.choose(&mut rng).expect(\"LOWER wont be empty\"));\n+    }\n+\n+\n+    if number {\n+        chars.extend_from_slice(LOWER);\n+        password.push(*LOWER.choose(&mut rng).expect(\"NUMBER wont be empty\"));\n+    }\n+\n+\n+    if symbol {\n+        chars.extend_from_slice(SYMBOL);\n+        password.push(*SYMBOL.choose(&mut rng).expect(\"SYMBOL wont be empty\"));\n+    }\n }\n"
                },
                {
                    "date": 1719211720404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,5 +43,10 @@\n     if symbol {\n         chars.extend_from_slice(SYMBOL);\n         password.push(*SYMBOL.choose(&mut rng).expect(\"SYMBOL wont be empty\"));\n     }\n+\n+\n+    for _ in 0..(length - password.len as u8){\n+        let c:&u8 = chars.choose(&mut rng).expect(\"Chars wont be empty in this context\");\n+    }\n }\n"
                },
                {
                    "date": 1719211751153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,5 +48,9 @@\n \n     for _ in 0..(length - password.len as u8){\n         let c:&u8 = chars.choose(&mut rng).expect(\"Chars wont be empty in this context\");\n     }\n+\n+    password.shuffle(&mut rng);\n+\n+    Ok(String::from_utf8(password);\n }\n"
                },
                {
                    "date": 1719211757898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,6 +51,6 @@\n     }\n \n     password.shuffle(&mut rng);\n \n-    Ok(String::from_utf8(password);\n+    Ok(String::from_utf8(password)?);\n }\n"
                },
                {
                    "date": 1719211763189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+use rand::seq::SliceRandom;\n+\n+\n+const UPPER:&[u8] = b\"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n+const LOWER:&[u8] = b\"abcdefghijkmnopqrstuvwxyz\"\n+const NUMBER:&[u8] = b\"123456789\"\n+const SYMBOL:&[u8] = b\"!@#$%^&*_\";\n+\n+\n+pub fn process_genpass (\n+    length:u8,\n+    upper:bool,\n+    lower:bool,\n+    number:bool,\n+    symbol:bool,\n+)-> anyhow::Result<String>{\n+\n+    let mut rng: rand::prelude::ThreadRng = rand::thread_rng();\n+    let mut password:Vec<u8> = Vec::new();\n+    let mut chars:Vec<u8> = Vec::new();\n+\n+\n+    if upper {\n+\n+        chars.extend_from_slice(UPPER);\n+        password.push(*UPPER.choose(&mut rng).expect(\"Upper won't be empty\"));\n+    }\n+\n+\n+\n+    if lower {\n+        chars.extend_from_slice(LOWER);\n+        password.push(*LOWER.choose(&mut rng).expect(\"LOWER wont be empty\"));\n+    }\n+\n+\n+    if number {\n+        chars.extend_from_slice(LOWER);\n+        password.push(*LOWER.choose(&mut rng).expect(\"NUMBER wont be empty\"));\n+    }\n+\n+\n+    if symbol {\n+        chars.extend_from_slice(SYMBOL);\n+        password.push(*SYMBOL.choose(&mut rng).expect(\"SYMBOL wont be empty\"));\n+    }\n+\n+\n+    for _ in 0..(length - password.len as u8){\n+        let c:&u8 = chars.choose(&mut rng).expect(\"Chars wont be empty in this context\");\n+    }\n+\n+    password.shuffle(&mut rng);\n+\n+    Ok(String::from_utf8(password)?);\n+}\n"
                },
                {
                    "date": 1719212196920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,60 +53,4 @@\n     password.shuffle(&mut rng);\n \n     Ok(String::from_utf8(password)?);\n }\n-use rand::seq::SliceRandom;\n-\n-\n-const UPPER:&[u8] = b\"ABCDEFGHJKLMNPQRSTUVWXYZ\";\n-const LOWER:&[u8] = b\"abcdefghijkmnopqrstuvwxyz\"\n-const NUMBER:&[u8] = b\"123456789\"\n-const SYMBOL:&[u8] = b\"!@#$%^&*_\";\n-\n-\n-pub fn process_genpass (\n-    length:u8,\n-    upper:bool,\n-    lower:bool,\n-    number:bool,\n-    symbol:bool,\n-)-> anyhow::Result<String>{\n-\n-    let mut rng: rand::prelude::ThreadRng = rand::thread_rng();\n-    let mut password:Vec<u8> = Vec::new();\n-    let mut chars:Vec<u8> = Vec::new();\n-\n-\n-    if upper {\n-\n-        chars.extend_from_slice(UPPER);\n-        password.push(*UPPER.choose(&mut rng).expect(\"Upper won't be empty\"));\n-    }\n-\n-\n-\n-    if lower {\n-        chars.extend_from_slice(LOWER);\n-        password.push(*LOWER.choose(&mut rng).expect(\"LOWER wont be empty\"));\n-    }\n-\n-\n-    if number {\n-        chars.extend_from_slice(LOWER);\n-        password.push(*LOWER.choose(&mut rng).expect(\"NUMBER wont be empty\"));\n-    }\n-\n-\n-    if symbol {\n-        chars.extend_from_slice(SYMBOL);\n-        password.push(*SYMBOL.choose(&mut rng).expect(\"SYMBOL wont be empty\"));\n-    }\n-\n-\n-    for _ in 0..(length - password.len as u8){\n-        let c:&u8 = chars.choose(&mut rng).expect(\"Chars wont be empty in this context\");\n-    }\n-\n-    password.shuffle(&mut rng);\n-\n-    Ok(String::from_utf8(password)?);\n-}\n"
                }
            ],
            "date": 1719211059150,
            "name": "Commit-0",
            "content": "use rand::seq::SliceRandom;\n"
        }
    ]
}