{
    "sourceFile": "rust-template/rust-liquid-two/rust-cli-project/src/process/text.rs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 56,
            "patches": [
                {
                    "date": 1719304275544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719304342625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,3 @@\n use crate::{process_genpass,process_text_sign};\n+use anyhow::Result;\n+use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n"
                },
                {
                    "date": 1719304383035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,5 @@\n use crate::{process_genpass,process_text_sign};\n use anyhow::Result;\n use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n+use rand::rngs::OsRng;\n+use std::{Collections::HashMap,io::Read};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304450451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,10 @@\n use crate::{process_genpass,process_text_sign};\n use anyhow::Result;\n use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n use rand::rngs::OsRng;\n-use std::{Collections::HashMap,io::Read};\n\\ No newline at end of file\n+use std::{Collections::HashMap,io::Read};\n+\n+pub trait TextSigner{\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304508060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,5 +6,10 @@\n \n pub trait TextSigner{\n \n     fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n+\n+\n+pub trait TextVerifier {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304533936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,5 +11,11 @@\n \n \n pub trait TextVerifier {\n     fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n+}\n+\n+\n+pub struct Blake3 {\n+    key:[u8;32],\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304560400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,6 +16,10 @@\n \n \n pub struct Blake3 {\n     key:[u8;32],\n-    \n+}\n+\n+\n+pub struct Ed255195Singer {\n+    key:SigningKey,\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304686354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,5 +21,16 @@\n \n \n pub struct Ed255195Singer {\n     key:SigningKey,\n+}\n+\n+\n+pub TextSigner for Blake3 {\n+\n+    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304737944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n \n         let mut buf:Vec<u8> = Vec::new();\n         reader.read_to_end(&mut buf)?;\n-        \n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304754185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,6 +31,7 @@\n \n         let mut buf:Vec<u8> = Vec::new();\n         reader.read_to_end(&mut buf)?;\n         let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes().to_vec());\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304808728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,5 +33,12 @@\n         reader.read_to_end(&mut buf)?;\n         let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n         Ok(ret.as_bytes().to_vec());\n     }\n+}\n+\n+\n+impl TextVerifier for Blake3 {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304858749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,6 +39,9 @@\n \n impl TextVerifier for Blake3 {\n     fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n         \n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304908944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,6 +42,8 @@\n         \n \n         let mut buf:Vec<u8> = Vec::new();\n         reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes() == sig);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304977730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,5 +45,13 @@\n         reader.read_to_end(&mut buf)?;\n         let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n         Ok(ret.as_bytes() == sig);\n     }\n+}\n+\n+impl TextSigner for Ed255195Signer {\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n+        let mut buf:Vec<u8> = Vec::new();\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719304993124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,7 +51,9 @@\n impl TextSigner for Ed255195Signer {\n \n     fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n         let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n         \n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719305037883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n \n     fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n         let mut buf:Vec<u8> = Vec::new();\n         reader.read_to_end(&mut buf)?;\n-        \n+        let signature:Singature = self.key.sign(&buf);\n+        Ok(signature.to_bytes().to_vec());\n \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719305139258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,5 +56,12 @@\n         let signature:Singature = self.key.sign(&buf);\n         Ok(signature.to_bytes().to_vec());\n \n     }\n+}\n+\n+\n+impl Blake3 {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719305167123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,7 +61,9 @@\n \n \n impl Blake3 {\n     pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+\n+        let key:&[u8] = key.as_ref();\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719305231432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,7 +63,8 @@\n impl Blake3 {\n     pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n \n         let key:&[u8] = key.as_ref();\n+        let key:[u8;32] = (&key[..32]).try_into()?;\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719305244279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,7 +64,8 @@\n     pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n \n         let key:&[u8] = key.as_ref();\n         let key:[u8;32] = (&key[..32]).try_into()?;\n-        \n+\n+        Ok(Self::new(key))\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719305280350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,5 +67,9 @@\n         let key:[u8;32] = (&key[..32]).try_into()?;\n \n         Ok(Self::new(key))\n     }\n+\n+    pub fn new(key:[u8;32]) -> Self {\n+        Self{key};\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719305313950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,5 +71,9 @@\n \n     pub fn new(key:[u8;32]) -> Self {\n         Self{key};\n     }\n+\n+    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306391822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,7 +73,9 @@\n         Self{key};\n     }\n \n     fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+\n+        let key:String = process_genpass(32,true,true,true,true)?;\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306429767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,7 +75,8 @@\n \n     fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n \n         let key:String = process_genpass(32,true,true,true,true)?;\n+        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306457882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,7 +76,7 @@\n     fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n \n         let key:String = process_genpass(32,true,true,true,true)?;\n         let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n-        \n+        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306463679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,83 @@\n+use crate::{process_genpass,process_text_sign};\n+use anyhow::Result;\n+use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n+use rand::rngs::OsRng;\n+use std::{Collections::HashMap,io::Read};\n+\n+pub trait TextSigner{\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n+\n+\n+pub trait TextVerifier {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n+}\n+\n+\n+pub struct Blake3 {\n+    key:[u8;32],\n+}\n+\n+\n+pub struct Ed255195Singer {\n+    key:SigningKey,\n+}\n+\n+\n+pub TextSigner for Blake3 {\n+\n+    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes().to_vec());\n+    }\n+}\n+\n+\n+impl TextVerifier for Blake3 {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+        \n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes() == sig);\n+    }\n+}\n+\n+impl TextSigner for Ed255195Signer {\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let signature:Singature = self.key.sign(&buf);\n+        Ok(signature.to_bytes().to_vec());\n+\n+    }\n+}\n+\n+\n+impl Blake3 {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:[u8;32] = (&key[..32]).try_into()?;\n+\n+        Ok(Self::new(key))\n+    }\n+\n+    pub fn new(key:[u8;32]) -> Self {\n+        Self{key};\n+    }\n+\n+    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+\n+        let key:String = process_genpass(32,true,true,true,true)?;\n+        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n+        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n+        Ok(map);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306511492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,86 +80,11 @@\n         map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n         Ok(map);\n     }\n }\n-use crate::{process_genpass,process_text_sign};\n-use anyhow::Result;\n-use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n-use rand::rngs::OsRng;\n-use std::{Collections::HashMap,io::Read};\n \n-pub trait TextSigner{\n \n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n-}\n-\n-\n-pub trait TextVerifier {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n-}\n-\n-\n-pub struct Blake3 {\n-    key:[u8;32],\n-}\n-\n-\n-pub struct Ed255195Singer {\n-    key:SigningKey,\n-}\n-\n-\n-pub TextSigner for Blake3 {\n-\n-    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes().to_vec());\n-    }\n-}\n-\n-\n-impl TextVerifier for Blake3 {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+impl Ed255195Signer {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n         \n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes() == sig);\n     }\n-}\n-\n-impl TextSigner for Ed255195Signer {\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let signature:Singature = self.key.sign(&buf);\n-        Ok(signature.to_bytes().to_vec());\n-\n-    }\n-}\n-\n-\n-impl Blake3 {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:[u8;32] = (&key[..32]).try_into()?;\n-\n-        Ok(Self::new(key))\n-    }\n-\n-    pub fn new(key:[u8;32]) -> Self {\n-        Self{key};\n-    }\n-\n-    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n-\n-        let key:String = process_genpass(32,true,true,true,true)?;\n-        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n-        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306570231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,7 +84,10 @@\n \n \n impl Ed255195Signer {\n     pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into();\n         \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306585559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,9 @@\n impl Ed255195Signer {\n     pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n \n         let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into();\n-        \n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        Ok(Self::new(key));\n+\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306639986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,5 +90,10 @@\n         let key:&[u8;32] = (&key[..32]).try_into()?;\n         Ok(Self::new(key));\n \n     }\n+\n+\n+    pub fn new(key:&[u8;32]) ->Self {\n+        let key:SigningKey = SigningKey::from_bytes(key);\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306646766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,6 +94,7 @@\n \n \n     pub fn new(key:&[u8;32]) ->Self {\n         let key:SigningKey = SigningKey::from_bytes(key);\n+        Self{key};\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306677065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,5 +96,9 @@\n     pub fn new(key:&[u8;32]) ->Self {\n         let key:SigningKey = SigningKey::from_bytes(key);\n         Self{key};\n     }\n+\n+    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n+        \n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306696969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+use crate::{process_genpass,process_text_sign};\n+use anyhow::Result;\n+use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n+use rand::rngs::OsRng;\n+use std::{Collections::HashMap,io::Read};\n+\n+pub trait TextSigner{\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n+\n+\n+pub trait TextVerifier {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n+}\n+\n+\n+pub struct Blake3 {\n+    key:[u8;32],\n+}\n+\n+\n+pub struct Ed255195Singer {\n+    key:SigningKey,\n+}\n+\n+\n+pub TextSigner for Blake3 {\n+\n+    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes().to_vec());\n+    }\n+}\n+\n+\n+impl TextVerifier for Blake3 {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+        \n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes() == sig);\n+    }\n+}\n+\n+impl TextSigner for Ed255195Signer {\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let signature:Singature = self.key.sign(&buf);\n+        Ok(signature.to_bytes().to_vec());\n+\n+    }\n+}\n+\n+\n+impl Blake3 {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:[u8;32] = (&key[..32]).try_into()?;\n+\n+        Ok(Self::new(key))\n+    }\n+\n+    pub fn new(key:[u8;32]) -> Self {\n+        Self{key};\n+    }\n+\n+    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+\n+        let key:String = process_genpass(32,true,true,true,true)?;\n+        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n+        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed255195Signer {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        Ok(Self::new(key));\n+\n+    }\n+\n+\n+    pub fn new(key:&[u8;32]) ->Self {\n+        let key:SigningKey = SigningKey::from_bytes(key);\n+        Self{key};\n+    }\n+\n+    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n+        let mut csprng:OsRng = OsRng;\n+        \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306725528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+use crate::{process_genpass,process_text_sign};\n+use anyhow::Result;\n+use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n+use rand::rngs::OsRng;\n+use std::{Collections::HashMap,io::Read};\n+\n+pub trait TextSigner{\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n+\n+\n+pub trait TextVerifier {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n+}\n+\n+\n+pub struct Blake3 {\n+    key:[u8;32],\n+}\n+\n+\n+pub struct Ed255195Singer {\n+    key:SigningKey,\n+}\n+\n+\n+pub TextSigner for Blake3 {\n+\n+    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes().to_vec());\n+    }\n+}\n+\n+\n+impl TextVerifier for Blake3 {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+        \n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes() == sig);\n+    }\n+}\n+\n+impl TextSigner for Ed255195Signer {\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let signature:Singature = self.key.sign(&buf);\n+        Ok(signature.to_bytes().to_vec());\n+\n+    }\n+}\n+\n+\n+impl Blake3 {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:[u8;32] = (&key[..32]).try_into()?;\n+\n+        Ok(Self::new(key))\n+    }\n+\n+    pub fn new(key:[u8;32]) -> Self {\n+        Self{key};\n+    }\n+\n+    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+\n+        let key:String = process_genpass(32,true,true,true,true)?;\n+        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n+        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed255195Signer {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        Ok(Self::new(key));\n+\n+    }\n+\n+\n+    pub fn new(key:&[u8;32]) ->Self {\n+        let key:SigningKey = SigningKey::from_bytes(key);\n+        Self{key};\n+    }\n+\n+    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n+        let mut csprng:OsRng = OsRng;\n+        let sk:SigningKey = SigningKey::generate(&mut csprng);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306746715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+use crate::{process_genpass,process_text_sign};\n+use anyhow::Result;\n+use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n+use rand::rngs::OsRng;\n+use std::{Collections::HashMap,io::Read};\n+\n+pub trait TextSigner{\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n+\n+\n+pub trait TextVerifier {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n+}\n+\n+\n+pub struct Blake3 {\n+    key:[u8;32],\n+}\n+\n+\n+pub struct Ed255195Singer {\n+    key:SigningKey,\n+}\n+\n+\n+pub TextSigner for Blake3 {\n+\n+    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes().to_vec());\n+    }\n+}\n+\n+\n+impl TextVerifier for Blake3 {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+        \n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes() == sig);\n+    }\n+}\n+\n+impl TextSigner for Ed255195Signer {\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let signature:Singature = self.key.sign(&buf);\n+        Ok(signature.to_bytes().to_vec());\n+\n+    }\n+}\n+\n+\n+impl Blake3 {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:[u8;32] = (&key[..32]).try_into()?;\n+\n+        Ok(Self::new(key))\n+    }\n+\n+    pub fn new(key:[u8;32]) -> Self {\n+        Self{key};\n+    }\n+\n+    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+\n+        let key:String = process_genpass(32,true,true,true,true)?;\n+        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n+        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed255195Signer {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        Ok(Self::new(key));\n+\n+    }\n+\n+\n+    pub fn new(key:&[u8;32]) ->Self {\n+        let key:SigningKey = SigningKey::from_bytes(key);\n+        Self{key};\n+    }\n+\n+    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n+        let mut csprng:OsRng = OsRng;\n+        let sk:SigningKey = SigningKey::generate(&mut csprng);\n+        let pk:VerifyingKey = (&sk).into();\n+        \n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306820204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,321 +101,9 @@\n     fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n         let mut csprng:OsRng = OsRng;\n         let sk:SigningKey = SigningKey::generate(&mut csprng);\n         let pk:VerifyingKey = (&sk).into();\n-        \n-    }\n-}\n-use crate::{process_genpass,process_text_sign};\n-use anyhow::Result;\n-use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n-use rand::rngs::OsRng;\n-use std::{Collections::HashMap,io::Read};\n+        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n \n-pub trait TextSigner{\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n-}\n-\n-\n-pub trait TextVerifier {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n-}\n-\n-\n-pub struct Blake3 {\n-    key:[u8;32],\n-}\n-\n-\n-pub struct Ed255195Singer {\n-    key:SigningKey,\n-}\n-\n-\n-pub TextSigner for Blake3 {\n-\n-    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes().to_vec());\n+        map.insert(\"\",sk.to_bytes().to_vec();)\n     }\n-}\n-\n-\n-impl TextVerifier for Blake3 {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n-        \n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes() == sig);\n-    }\n-}\n-\n-impl TextSigner for Ed255195Signer {\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let signature:Singature = self.key.sign(&buf);\n-        Ok(signature.to_bytes().to_vec());\n-\n-    }\n-}\n-\n-\n-impl Blake3 {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:[u8;32] = (&key[..32]).try_into()?;\n-\n-        Ok(Self::new(key))\n-    }\n-\n-    pub fn new(key:[u8;32]) -> Self {\n-        Self{key};\n-    }\n-\n-    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n-\n-        let key:String = process_genpass(32,true,true,true,true)?;\n-        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n-        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed255195Signer {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        Ok(Self::new(key));\n-\n-    }\n-\n-\n-    pub fn new(key:&[u8;32]) ->Self {\n-        let key:SigningKey = SigningKey::from_bytes(key);\n-        Self{key};\n-    }\n-\n-    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n-        let mut csprng:OsRng = OsRng;\n-        let sk:SigningKey = SigningKey::generate(&mut csprng);\n-    }\n-}\n-use crate::{process_genpass,process_text_sign};\n-use anyhow::Result;\n-use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n-use rand::rngs::OsRng;\n-use std::{Collections::HashMap,io::Read};\n-\n-pub trait TextSigner{\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n-}\n-\n-\n-pub trait TextVerifier {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n-}\n-\n-\n-pub struct Blake3 {\n-    key:[u8;32],\n-}\n-\n-\n-pub struct Ed255195Singer {\n-    key:SigningKey,\n-}\n-\n-\n-pub TextSigner for Blake3 {\n-\n-    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes().to_vec());\n-    }\n-}\n-\n-\n-impl TextVerifier for Blake3 {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n-        \n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes() == sig);\n-    }\n-}\n-\n-impl TextSigner for Ed255195Signer {\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let signature:Singature = self.key.sign(&buf);\n-        Ok(signature.to_bytes().to_vec());\n-\n-    }\n-}\n-\n-\n-impl Blake3 {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:[u8;32] = (&key[..32]).try_into()?;\n-\n-        Ok(Self::new(key))\n-    }\n-\n-    pub fn new(key:[u8;32]) -> Self {\n-        Self{key};\n-    }\n-\n-    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n-\n-        let key:String = process_genpass(32,true,true,true,true)?;\n-        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n-        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed255195Signer {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        Ok(Self::new(key));\n-\n-    }\n-\n-\n-    pub fn new(key:&[u8;32]) ->Self {\n-        let key:SigningKey = SigningKey::from_bytes(key);\n-        Self{key};\n-    }\n-\n-    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n-        let mut csprng:OsRng = OsRng;\n-        \n-    }\n-}\n-use crate::{process_genpass,process_text_sign};\n-use anyhow::Result;\n-use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n-use rand::rngs::OsRng;\n-use std::{Collections::HashMap,io::Read};\n-\n-pub trait TextSigner{\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n-}\n-\n-\n-pub trait TextVerifier {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n-}\n-\n-\n-pub struct Blake3 {\n-    key:[u8;32],\n-}\n-\n-\n-pub struct Ed255195Singer {\n-    key:SigningKey,\n-}\n-\n-\n-pub TextSigner for Blake3 {\n-\n-    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes().to_vec());\n-    }\n-}\n-\n-\n-impl TextVerifier for Blake3 {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n-        \n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes() == sig);\n-    }\n-}\n-\n-impl TextSigner for Ed255195Signer {\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let signature:Singature = self.key.sign(&buf);\n-        Ok(signature.to_bytes().to_vec());\n-\n-    }\n-}\n-\n-\n-impl Blake3 {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:[u8;32] = (&key[..32]).try_into()?;\n-\n-        Ok(Self::new(key))\n-    }\n-\n-    pub fn new(key:[u8;32]) -> Self {\n-        Self{key};\n-    }\n-\n-    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n-\n-        let key:String = process_genpass(32,true,true,true,true)?;\n-        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n-        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed255195Signer {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        Ok(Self::new(key));\n-\n-    }\n-\n-\n-    pub fn new(key:&[u8;32]) ->Self {\n-        let key:SigningKey = SigningKey::from_bytes(key);\n-        Self{key};\n-    }\n-\n-    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n-        \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306835177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,7 +103,7 @@\n         let sk:SigningKey = SigningKey::generate(&mut csprng);\n         let pk:VerifyingKey = (&sk).into();\n         let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n \n-        map.insert(\"\",sk.to_bytes().to_vec();)\n+        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec())\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306851639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,7 +103,8 @@\n         let sk:SigningKey = SigningKey::generate(&mut csprng);\n         let pk:VerifyingKey = (&sk).into();\n         let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n \n-        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec())\n+        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n+        map.insert(\"\",sk.to_bytes().to_vec());\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306860842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,7 +104,7 @@\n         let pk:VerifyingKey = (&sk).into();\n         let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n \n         map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n-        map.insert(\"\",sk.to_bytes().to_vec());\n+        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719306867388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,6 +105,8 @@\n         let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n \n         map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n         map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n+\n+        Ok(map);\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307016646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,5 +108,15 @@\n         map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n \n         Ok(map);\n     }\n+}\n+\n+\n+impl Ed25519Verifier {\n+\n+    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307040957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,6 +117,8 @@\n     pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n \n         let key:&[u8] = key.as_ref();\n         let key:&[u8;32] = (&key[..32]).try_into()?;\n+        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n+        \n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307049866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+use crate::{process_genpass,process_text_sign};\n+use anyhow::Result;\n+use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n+use rand::rngs::OsRng;\n+use std::{Collections::HashMap,io::Read};\n+\n+pub trait TextSigner{\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n+\n+\n+pub trait TextVerifier {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n+}\n+\n+\n+pub struct Blake3 {\n+    key:[u8;32],\n+}\n+\n+\n+pub struct Ed255195Singer {\n+    key:SigningKey,\n+}\n+\n+\n+pub TextSigner for Blake3 {\n+\n+    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes().to_vec());\n+    }\n+}\n+\n+\n+impl TextVerifier for Blake3 {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+        \n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes() == sig);\n+    }\n+}\n+\n+impl TextSigner for Ed255195Signer {\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let signature:Singature = self.key.sign(&buf);\n+        Ok(signature.to_bytes().to_vec());\n+\n+    }\n+}\n+\n+\n+impl Blake3 {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:[u8;32] = (&key[..32]).try_into()?;\n+\n+        Ok(Self::new(key))\n+    }\n+\n+    pub fn new(key:[u8;32]) -> Self {\n+        Self{key};\n+    }\n+\n+    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+\n+        let key:String = process_genpass(32,true,true,true,true)?;\n+        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n+        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed255195Signer {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        Ok(Self::new(key));\n+\n+    }\n+\n+\n+    pub fn new(key:&[u8;32]) ->Self {\n+        let key:SigningKey = SigningKey::from_bytes(key);\n+        Self{key};\n+    }\n+\n+    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n+        let mut csprng:OsRng = OsRng;\n+        let sk:SigningKey = SigningKey::generate(&mut csprng);\n+        let pk:VerifyingKey = (&sk).into();\n+        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n+\n+        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n+        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n+\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed25519Verifier {\n+\n+    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n+        Ok(Self{key})\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307113023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+use crate::{process_genpass,process_text_sign};\n+use anyhow::Result;\n+use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n+use rand::rngs::OsRng;\n+use std::{Collections::HashMap,io::Read};\n+\n+pub trait TextSigner{\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n+\n+\n+pub trait TextVerifier {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n+}\n+\n+\n+pub struct Blake3 {\n+    key:[u8;32],\n+}\n+\n+\n+pub struct Ed255195Singer {\n+    key:SigningKey,\n+}\n+\n+\n+pub TextSigner for Blake3 {\n+\n+    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes().to_vec());\n+    }\n+}\n+\n+\n+impl TextVerifier for Blake3 {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+        \n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes() == sig);\n+    }\n+}\n+\n+impl TextSigner for Ed255195Signer {\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let signature:Singature = self.key.sign(&buf);\n+        Ok(signature.to_bytes().to_vec());\n+\n+    }\n+}\n+\n+\n+impl Blake3 {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:[u8;32] = (&key[..32]).try_into()?;\n+\n+        Ok(Self::new(key))\n+    }\n+\n+    pub fn new(key:[u8;32]) -> Self {\n+        Self{key};\n+    }\n+\n+    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+\n+        let key:String = process_genpass(32,true,true,true,true)?;\n+        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n+        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed255195Signer {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        Ok(Self::new(key));\n+\n+    }\n+\n+\n+    pub fn new(key:&[u8;32]) ->Self {\n+        let key:SigningKey = SigningKey::from_bytes(key);\n+        Self{key};\n+    }\n+\n+    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n+        let mut csprng:OsRng = OsRng;\n+        let sk:SigningKey = SigningKey::generate(&mut csprng);\n+        let pk:VerifyingKey = (&sk).into();\n+        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n+\n+        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n+        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n+\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed25519Verifier {\n+\n+    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n+        Ok(Self{key})\n+    }\n+}\n+\n+\n+pub fn process_text_sign(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<Vec<u8>> {\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307136561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,254 +124,9 @@\n }\n \n \n pub fn process_text_sign(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<Vec<u8>> {\n-    \n-}\n-use crate::{process_genpass,process_text_sign};\n-use anyhow::Result;\n-use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n-use rand::rngs::OsRng;\n-use std::{Collections::HashMap,io::Read};\n \n-pub trait TextSigner{\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n-}\n-\n-\n-pub trait TextVerifier {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n-}\n-\n-\n-pub struct Blake3 {\n-    key:[u8;32],\n-}\n-\n-\n-pub struct Ed255195Singer {\n-    key:SigningKey,\n-}\n-\n-\n-pub TextSigner for Blake3 {\n-\n-    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes().to_vec());\n-    }\n-}\n-\n-\n-impl TextVerifier for Blake3 {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+    let signer:Box<dyn TextSigner> = match format {\n         \n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes() == sig);\n     }\n-}\n-\n-impl TextSigner for Ed255195Signer {\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let signature:Singature = self.key.sign(&buf);\n-        Ok(signature.to_bytes().to_vec());\n-\n-    }\n-}\n-\n-\n-impl Blake3 {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:[u8;32] = (&key[..32]).try_into()?;\n-\n-        Ok(Self::new(key))\n-    }\n-\n-    pub fn new(key:[u8;32]) -> Self {\n-        Self{key};\n-    }\n-\n-    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n-\n-        let key:String = process_genpass(32,true,true,true,true)?;\n-        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n-        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed255195Signer {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        Ok(Self::new(key));\n-\n-    }\n-\n-\n-    pub fn new(key:&[u8;32]) ->Self {\n-        let key:SigningKey = SigningKey::from_bytes(key);\n-        Self{key};\n-    }\n-\n-    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n-        let mut csprng:OsRng = OsRng;\n-        let sk:SigningKey = SigningKey::generate(&mut csprng);\n-        let pk:VerifyingKey = (&sk).into();\n-        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n-\n-        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n-        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n-\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed25519Verifier {\n-\n-    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n-        Ok(Self{key})\n-    }\n-}\n-use crate::{process_genpass,process_text_sign};\n-use anyhow::Result;\n-use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n-use rand::rngs::OsRng;\n-use std::{Collections::HashMap,io::Read};\n-\n-pub trait TextSigner{\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n-}\n-\n-\n-pub trait TextVerifier {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n-}\n-\n-\n-pub struct Blake3 {\n-    key:[u8;32],\n-}\n-\n-\n-pub struct Ed255195Singer {\n-    key:SigningKey,\n-}\n-\n-\n-pub TextSigner for Blake3 {\n-\n-    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes().to_vec());\n-    }\n-}\n-\n-\n-impl TextVerifier for Blake3 {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n-        \n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes() == sig);\n-    }\n-}\n-\n-impl TextSigner for Ed255195Signer {\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let signature:Singature = self.key.sign(&buf);\n-        Ok(signature.to_bytes().to_vec());\n-\n-    }\n-}\n-\n-\n-impl Blake3 {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:[u8;32] = (&key[..32]).try_into()?;\n-\n-        Ok(Self::new(key))\n-    }\n-\n-    pub fn new(key:[u8;32]) -> Self {\n-        Self{key};\n-    }\n-\n-    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n-\n-        let key:String = process_genpass(32,true,true,true,true)?;\n-        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n-        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed255195Signer {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        Ok(Self::new(key));\n-\n-    }\n-\n-\n-    pub fn new(key:&[u8;32]) ->Self {\n-        let key:SigningKey = SigningKey::from_bytes(key);\n-        Self{key};\n-    }\n-\n-    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n-        let mut csprng:OsRng = OsRng;\n-        let sk:SigningKey = SigningKey::generate(&mut csprng);\n-        let pk:VerifyingKey = (&sk).into();\n-        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n-\n-        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n-        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n-\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed25519Verifier {\n-\n-    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n-        \n-    }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307222357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,7 +126,8 @@\n \n pub fn process_text_sign(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<Vec<u8>> {\n \n     let signer:Box<dyn TextSigner> = match format {\n-        \n+        TextSignFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n+        TextSignFormat::Ed25519 => Box::new(Ed255195Signer::try_new(key)?),\n     }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307234636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,6 +128,8 @@\n \n     let signer:Box<dyn TextSigner> = match format {\n         TextSignFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n         TextSignFormat::Ed25519 => Box::new(Ed255195Signer::try_new(key)?),\n-    }\n+    };\n+\n+    signer.sign(reader);\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307327441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,5 +131,13 @@\n         TextSignFormat::Ed25519 => Box::new(Ed255195Signer::try_new(key)?),\n     };\n \n     signer.sign(reader);\n+}\n+\n+\n+pub fn process_text_verify(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<bool>{\n+\n+    let verifier:Box<dyn TextVerifier> = match format {\n+        \n+    };\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307359843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,7 +137,9 @@\n \n pub fn process_text_verify(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<bool>{\n \n     let verifier:Box<dyn TextVerifier> = match format {\n-        \n+\n+        TextSignerFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n+        TextSignerFormat::Ed25519 => Box::new(Ed255195Verifier::try_new(key)?),\n     };\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307374096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,147 @@\n+use crate::{process_genpass,process_text_sign};\n+use anyhow::Result;\n+use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n+use rand::rngs::OsRng;\n+use std::{Collections::HashMap,io::Read};\n+\n+pub trait TextSigner{\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n+\n+\n+pub trait TextVerifier {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n+}\n+\n+\n+pub struct Blake3 {\n+    key:[u8;32],\n+}\n+\n+\n+pub struct Ed255195Singer {\n+    key:SigningKey,\n+}\n+\n+\n+pub TextSigner for Blake3 {\n+\n+    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes().to_vec());\n+    }\n+}\n+\n+\n+impl TextVerifier for Blake3 {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+        \n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes() == sig);\n+    }\n+}\n+\n+impl TextSigner for Ed255195Signer {\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let signature:Singature = self.key.sign(&buf);\n+        Ok(signature.to_bytes().to_vec());\n+\n+    }\n+}\n+\n+\n+impl Blake3 {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:[u8;32] = (&key[..32]).try_into()?;\n+\n+        Ok(Self::new(key))\n+    }\n+\n+    pub fn new(key:[u8;32]) -> Self {\n+        Self{key};\n+    }\n+\n+    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+\n+        let key:String = process_genpass(32,true,true,true,true)?;\n+        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n+        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed255195Signer {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        Ok(Self::new(key));\n+\n+    }\n+\n+\n+    pub fn new(key:&[u8;32]) ->Self {\n+        let key:SigningKey = SigningKey::from_bytes(key);\n+        Self{key};\n+    }\n+\n+    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n+        let mut csprng:OsRng = OsRng;\n+        let sk:SigningKey = SigningKey::generate(&mut csprng);\n+        let pk:VerifyingKey = (&sk).into();\n+        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n+\n+        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n+        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n+\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed25519Verifier {\n+\n+    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n+        Ok(Self{key})\n+    }\n+}\n+\n+\n+pub fn process_text_sign(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<Vec<u8>> {\n+\n+    let signer:Box<dyn TextSigner> = match format {\n+        TextSignFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n+        TextSignFormat::Ed25519 => Box::new(Ed255195Signer::try_new(key)?),\n+    };\n+\n+    signer.sign(reader);\n+}\n+\n+\n+pub fn process_text_verify(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<bool>{\n+\n+    let verifier:Box<dyn TextVerifier> = match format {\n+\n+        TextSignerFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n+        TextSignerFormat::Ed25519 => Box::new(Ed255195Verifier::try_new(key)?),\n+    };\n+\n+    verifier.verify(reader,sig);\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307675104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,149 +144,12 @@\n     };\n \n     verifier.verify(reader,sig);\n }\n-use crate::{process_genpass,process_text_sign};\n-use anyhow::Result;\n-use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n-use rand::rngs::OsRng;\n-use std::{Collections::HashMap,io::Read};\n \n-pub trait TextSigner{\n \n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n-}\n-\n-\n-pub trait TextVerifier {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n-}\n-\n-\n-pub struct Blake3 {\n-    key:[u8;32],\n-}\n-\n-\n-pub struct Ed255195Singer {\n-    key:SigningKey,\n-}\n-\n-\n-pub TextSigner for Blake3 {\n-\n-    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes().to_vec());\n+pub fn process_text_key_generate(format:TextSignFormat)-> Result<HashMap<&'static str,Vec<u8>>>{\n+    match format {\n+        TextSignFormat::Blake3 => Blake3::generate(),\n+        TextSignFormat:Ed25519 => Ed255195Signer::generate();,\n     }\n-}\n-\n-\n-impl TextVerifier for Blake3 {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n-        \n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes() == sig);\n-    }\n-}\n-\n-impl TextSigner for Ed255195Signer {\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let signature:Singature = self.key.sign(&buf);\n-        Ok(signature.to_bytes().to_vec());\n-\n-    }\n-}\n-\n-\n-impl Blake3 {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:[u8;32] = (&key[..32]).try_into()?;\n-\n-        Ok(Self::new(key))\n-    }\n-\n-    pub fn new(key:[u8;32]) -> Self {\n-        Self{key};\n-    }\n-\n-    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n-\n-        let key:String = process_genpass(32,true,true,true,true)?;\n-        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n-        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed255195Signer {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        Ok(Self::new(key));\n-\n-    }\n-\n-\n-    pub fn new(key:&[u8;32]) ->Self {\n-        let key:SigningKey = SigningKey::from_bytes(key);\n-        Self{key};\n-    }\n-\n-    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n-        let mut csprng:OsRng = OsRng;\n-        let sk:SigningKey = SigningKey::generate(&mut csprng);\n-        let pk:VerifyingKey = (&sk).into();\n-        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n-\n-        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n-        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n-\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed25519Verifier {\n-\n-    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n-        Ok(Self{key})\n-    }\n-}\n-\n-\n-pub fn process_text_sign(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<Vec<u8>> {\n-\n-    let signer:Box<dyn TextSigner> = match format {\n-        TextSignFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n-        TextSignFormat::Ed25519 => Box::new(Ed255195Signer::try_new(key)?),\n-    };\n-\n-    signer.sign(reader);\n-}\n-\n-\n-pub fn process_text_verify(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<bool>{\n-\n-    let verifier:Box<dyn TextVerifier> = match format {\n-\n-        TextSignerFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n-        TextSignerFormat::Ed25519 => Box::new(Ed255195Verifier::try_new(key)?),\n-    };\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307688374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+use crate::{process_genpass,process_text_sign};\n+use anyhow::Result;\n+use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n+use rand::rngs::OsRng;\n+use std::{Collections::HashMap,io::Read};\n+\n+pub trait TextSigner{\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n+\n+\n+pub trait TextVerifier {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n+}\n+\n+\n+pub struct Blake3 {\n+    key:[u8;32],\n+}\n+\n+\n+pub struct Ed255195Singer {\n+    key:SigningKey,\n+}\n+\n+\n+pub TextSigner for Blake3 {\n+\n+    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes().to_vec());\n+    }\n+}\n+\n+\n+impl TextVerifier for Blake3 {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+        \n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes() == sig);\n+    }\n+}\n+\n+impl TextSigner for Ed255195Signer {\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let signature:Singature = self.key.sign(&buf);\n+        Ok(signature.to_bytes().to_vec());\n+\n+    }\n+}\n+\n+\n+impl Blake3 {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:[u8;32] = (&key[..32]).try_into()?;\n+\n+        Ok(Self::new(key))\n+    }\n+\n+    pub fn new(key:[u8;32]) -> Self {\n+        Self{key};\n+    }\n+\n+    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+\n+        let key:String = process_genpass(32,true,true,true,true)?;\n+        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n+        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed255195Signer {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        Ok(Self::new(key));\n+\n+    }\n+\n+\n+    pub fn new(key:&[u8;32]) ->Self {\n+        let key:SigningKey = SigningKey::from_bytes(key);\n+        Self{key};\n+    }\n+\n+    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n+        let mut csprng:OsRng = OsRng;\n+        let sk:SigningKey = SigningKey::generate(&mut csprng);\n+        let pk:VerifyingKey = (&sk).into();\n+        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n+\n+        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n+        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n+\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed25519Verifier {\n+\n+    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n+        Ok(Self{key})\n+    }\n+}\n+\n+\n+pub fn process_text_sign(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<Vec<u8>> {\n+\n+    let signer:Box<dyn TextSigner> = match format {\n+        TextSignFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n+        TextSignFormat::Ed25519 => Box::new(Ed255195Signer::try_new(key)?),\n+    };\n+\n+    signer.sign(reader);\n+}\n+\n+\n+pub fn process_text_verify(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<bool>{\n+\n+    let verifier:Box<dyn TextVerifier> = match format {\n+\n+        TextSignerFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n+        TextSignerFormat::Ed25519 => Box::new(Ed255195Verifier::try_new(key)?),\n+    };\n+\n+    verifier.verify(reader,sig);\n+}\n+\n+\n+pub fn process_text_key_generate(format:TextSignFormat)-> Result<HashMap<&'static str,Vec<u8>>>{\n+    match format {\n+        TextSignFormat::Blake3 => Blake3::generate(),\n+        TextSignFormat:Ed25519 => Ed255195Signer::generate();,\n+    }\n+}\n+\n+\n+#[cfg(test)]\n"
                },
                {
                    "date": 1719307693679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,159 +155,7 @@\n }\n \n \n #[cfg(test)]\n-use crate::{process_genpass,process_text_sign};\n-use anyhow::Result;\n-use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n-use rand::rngs::OsRng;\n-use std::{Collections::HashMap,io::Read};\n-\n-pub trait TextSigner{\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n-}\n-\n-\n-pub trait TextVerifier {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n-}\n-\n-\n-pub struct Blake3 {\n-    key:[u8;32],\n-}\n-\n-\n-pub struct Ed255195Singer {\n-    key:SigningKey,\n-}\n-\n-\n-pub TextSigner for Blake3 {\n-\n-    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes().to_vec());\n-    }\n-}\n-\n-\n-impl TextVerifier for Blake3 {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n-        \n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes() == sig);\n-    }\n-}\n-\n-impl TextSigner for Ed255195Signer {\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let signature:Singature = self.key.sign(&buf);\n-        Ok(signature.to_bytes().to_vec());\n-\n-    }\n-}\n-\n-\n-impl Blake3 {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:[u8;32] = (&key[..32]).try_into()?;\n-\n-        Ok(Self::new(key))\n-    }\n-\n-    pub fn new(key:[u8;32]) -> Self {\n-        Self{key};\n-    }\n-\n-    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n-\n-        let key:String = process_genpass(32,true,true,true,true)?;\n-        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n-        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed255195Signer {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        Ok(Self::new(key));\n-\n-    }\n-\n-\n-    pub fn new(key:&[u8;32]) ->Self {\n-        let key:SigningKey = SigningKey::from_bytes(key);\n-        Self{key};\n-    }\n-\n-    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n-        let mut csprng:OsRng = OsRng;\n-        let sk:SigningKey = SigningKey::generate(&mut csprng);\n-        let pk:VerifyingKey = (&sk).into();\n-        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n-\n-        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n-        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n-\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed25519Verifier {\n-\n-    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n-        Ok(Self{key})\n-    }\n-}\n-\n-\n-pub fn process_text_sign(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<Vec<u8>> {\n-\n-    let signer:Box<dyn TextSigner> = match format {\n-        TextSignFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n-        TextSignFormat::Ed25519 => Box::new(Ed255195Signer::try_new(key)?),\n-    };\n-\n-    signer.sign(reader);\n-}\n-\n-\n-pub fn process_text_verify(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<bool>{\n-\n-    let verifier:Box<dyn TextVerifier> = match format {\n-\n-        TextSignerFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n-        TextSignerFormat::Ed25519 => Box::new(Ed255195Verifier::try_new(key)?),\n-    };\n-\n-    verifier.verify(reader,sig);\n-}\n-\n-\n-pub fn process_text_key_generate(format:TextSignFormat)-> Result<HashMap<&'static str,Vec<u8>>>{\n-    match format {\n-        TextSignFormat::Blake3 => Blake3::generate(),\n-        TextSignFormat:Ed25519 => Ed255195Signer::generate();,\n-    }\n+mod test {\n+    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307701662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+use crate::{process_genpass,process_text_sign};\n+use anyhow::Result;\n+use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n+use rand::rngs::OsRng;\n+use std::{Collections::HashMap,io::Read};\n+\n+pub trait TextSigner{\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n+}\n+\n+\n+pub trait TextVerifier {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n+}\n+\n+\n+pub struct Blake3 {\n+    key:[u8;32],\n+}\n+\n+\n+pub struct Ed255195Singer {\n+    key:SigningKey,\n+}\n+\n+\n+pub TextSigner for Blake3 {\n+\n+    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes().to_vec());\n+    }\n+}\n+\n+\n+impl TextVerifier for Blake3 {\n+    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n+        \n+\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n+        Ok(ret.as_bytes() == sig);\n+    }\n+}\n+\n+impl TextSigner for Ed255195Signer {\n+\n+    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n+        let mut buf:Vec<u8> = Vec::new();\n+        reader.read_to_end(&mut buf)?;\n+        let signature:Singature = self.key.sign(&buf);\n+        Ok(signature.to_bytes().to_vec());\n+\n+    }\n+}\n+\n+\n+impl Blake3 {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:[u8;32] = (&key[..32]).try_into()?;\n+\n+        Ok(Self::new(key))\n+    }\n+\n+    pub fn new(key:[u8;32]) -> Self {\n+        Self{key};\n+    }\n+\n+    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n+\n+        let key:String = process_genpass(32,true,true,true,true)?;\n+        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n+        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed255195Signer {\n+    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        Ok(Self::new(key));\n+\n+    }\n+\n+\n+    pub fn new(key:&[u8;32]) ->Self {\n+        let key:SigningKey = SigningKey::from_bytes(key);\n+        Self{key};\n+    }\n+\n+    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n+        let mut csprng:OsRng = OsRng;\n+        let sk:SigningKey = SigningKey::generate(&mut csprng);\n+        let pk:VerifyingKey = (&sk).into();\n+        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n+\n+        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n+        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n+\n+        Ok(map);\n+    }\n+}\n+\n+\n+impl Ed25519Verifier {\n+\n+    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n+\n+        let key:&[u8] = key.as_ref();\n+        let key:&[u8;32] = (&key[..32]).try_into()?;\n+        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n+        Ok(Self{key})\n+    }\n+}\n+\n+\n+pub fn process_text_sign(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<Vec<u8>> {\n+\n+    let signer:Box<dyn TextSigner> = match format {\n+        TextSignFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n+        TextSignFormat::Ed25519 => Box::new(Ed255195Signer::try_new(key)?),\n+    };\n+\n+    signer.sign(reader);\n+}\n+\n+\n+pub fn process_text_verify(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<bool>{\n+\n+    let verifier:Box<dyn TextVerifier> = match format {\n+\n+        TextSignerFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n+        TextSignerFormat::Ed25519 => Box::new(Ed255195Verifier::try_new(key)?),\n+    };\n+\n+    verifier.verify(reader,sig);\n+}\n+\n+\n+pub fn process_text_key_generate(format:TextSignFormat)-> Result<HashMap<&'static str,Vec<u8>>>{\n+    match format {\n+        TextSignFormat::Blake3 => Blake3::generate(),\n+        TextSignFormat:Ed25519 => Ed255195Signer::generate();,\n+    }\n+}\n+\n+\n+#[cfg(test)]\n+mod test {\n+    use super::*;\n+    \n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307811600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,167 +157,7 @@\n \n #[cfg(test)]\n mod test {\n     use super::*;\n+    use base64::{engine::general_purpose::URL_SAFE_NO_PAD,Engine};\n     \n-}\n-use crate::{process_genpass,process_text_sign};\n-use anyhow::Result;\n-use ed25519_dalek::{Singature,Singer,SigningKey,Verifier,VerifyingKey};\n-use rand::rngs::OsRng;\n-use std::{Collections::HashMap,io::Read};\n-\n-pub trait TextSigner{\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>>;\n-}\n-\n-\n-pub trait TextVerifier {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>;\n-}\n-\n-\n-pub struct Blake3 {\n-    key:[u8;32],\n-}\n-\n-\n-pub struct Ed255195Singer {\n-    key:SigningKey,\n-}\n-\n-\n-pub TextSigner for Blake3 {\n-\n-    fn sign(&self,reader:&mut dyn Read)-> Result<Vec<u8>> {\n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes().to_vec());\n-    }\n-}\n-\n-\n-impl TextVerifier for Blake3 {\n-    fn verify(&self,reader:&mut dyn Read,sig:&[u8]) -> Result<bool>{\n-        \n-\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let ret:blake3::Hash = blake3::keyed_hash(&self.key,&buf);\n-        Ok(ret.as_bytes() == sig);\n-    }\n-}\n-\n-impl TextSigner for Ed255195Signer {\n-\n-    fn sign(&self,reader:&mut dyn Read) -> Result<Vec<u8>> {\n-        let mut buf:Vec<u8> = Vec::new();\n-        reader.read_to_end(&mut buf)?;\n-        let signature:Singature = self.key.sign(&buf);\n-        Ok(signature.to_bytes().to_vec());\n-\n-    }\n-}\n-\n-\n-impl Blake3 {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self> {\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:[u8;32] = (&key[..32]).try_into()?;\n-\n-        Ok(Self::new(key))\n-    }\n-\n-    pub fn new(key:[u8;32]) -> Self {\n-        Self{key};\n-    }\n-\n-    fn generate()-> Result<HashMap<&'static str,Vec<u8>>> {\n-\n-        let key:String = process_genpass(32,true,true,true,true)?;\n-        let mut map:HasMap<&str,Vec<u8>> = HashMap::new();\n-        map.insert(\"blake3.txt\",key.as_bytes().to_vec());\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed255195Signer {\n-    pub fn try_new(key:impl AsRef<[u8]>) -> Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        Ok(Self::new(key));\n-\n-    }\n-\n-\n-    pub fn new(key:&[u8;32]) ->Self {\n-        let key:SigningKey = SigningKey::from_bytes(key);\n-        Self{key};\n-    }\n-\n-    fn generate() -> Result<HashMap<&'static str,Vec<u8>> {\n-        let mut csprng:OsRng = OsRng;\n-        let sk:SigningKey = SigningKey::generate(&mut csprng);\n-        let pk:VerifyingKey = (&sk).into();\n-        let mut map:HashMap<&str,Vec<u8>> = HashMap::new();\n-\n-        map.insert(\"ed25519.sk\",sk.to_bytes().to_vec());\n-        map.insert(\"ed25519.pk\",sk.to_bytes().to_vec());\n-\n-        Ok(map);\n-    }\n-}\n-\n-\n-impl Ed25519Verifier {\n-\n-    pub fn try_new(key:impl AsRef>[u8]) ->Result<Self>{\n-\n-        let key:&[u8] = key.as_ref();\n-        let key:&[u8;32] = (&key[..32]).try_into()?;\n-        let key:VerifyingKey = VerifyingKey::from_bytes(key)?;\n-        Ok(Self{key})\n-    }\n-}\n-\n-\n-pub fn process_text_sign(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<Vec<u8>> {\n-\n-    let signer:Box<dyn TextSigner> = match format {\n-        TextSignFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n-        TextSignFormat::Ed25519 => Box::new(Ed255195Signer::try_new(key)?),\n-    };\n-\n-    signer.sign(reader);\n-}\n-\n-\n-pub fn process_text_verify(reader:&mut dyn Read,key:&[u8],format:TextSignFormat)-> Result<bool>{\n-\n-    let verifier:Box<dyn TextVerifier> = match format {\n-\n-        TextSignerFormat::Blake3 => Box::new(Blake3::try_new(key)?),\n-        TextSignerFormat::Ed25519 => Box::new(Ed255195Verifier::try_new(key)?),\n-    };\n-\n-    verifier.verify(reader,sig);\n-}\n-\n-\n-pub fn process_text_key_generate(format:TextSignFormat)-> Result<HashMap<&'static str,Vec<u8>>>{\n-    match format {\n-        TextSignFormat::Blake3 => Blake3::generate(),\n-        TextSignFormat:Ed25519 => Ed255195Signer::generate();,\n-    }\n-}\n-\n-\n-#[cfg(test)]\n-mod test {\n-    \n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307862282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,6 +158,7 @@\n #[cfg(test)]\n mod test {\n     use super::*;\n     use base64::{engine::general_purpose::URL_SAFE_NO_PAD,Engine};\n-    \n+\n+    const KEY:&[u8] = include_bytes!(\"../../fixtures/blake3.txt\");\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719307974107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,10 +155,12 @@\n }\n \n \n #[cfg(test)]\n-mod test {\n+mod tests {\n     use super::*;\n     use base64::{engine::general_purpose::URL_SAFE_NO_PAD,Engine};\n \n     const KEY:&[u8] = include_bytes!(\"../../fixtures/blake3.txt\");\n+\n+    #[cfg(test)]\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1719304275544,
            "name": "Commit-0",
            "content": "use crate::{process_genpass,process_text_sign};\n"
        }
    ]
}